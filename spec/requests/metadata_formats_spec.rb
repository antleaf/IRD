# require 'rails_helper'
#
# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to test the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator. If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails. There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# RSpec.describe "/metadata_formats", type: :request do
#
#   # This should return the minimal set of attributes required to create a valid
#   # MetadataFormat. As you add validations to MetadataFormat, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip("Add a hash of attributes valid for your model")
#   }
#
#   let(:invalid_attributes) {
#     skip("Add a hash of attributes invalid for your model")
#   }
#
#   describe "GET /index" do
#     it "renders a successful response" do
#       MetadataFormat.create! valid_attributes
#       get metadata_formats_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /show" do
#     it "renders a successful response" do
#       metadata_format = MetadataFormat.create! valid_attributes
#       get metadata_format_url(metadata_format)
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /new" do
#     it "renders a successful response" do
#       get new_metadata_format_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /edit" do
#     it "renders a successful response" do
#       metadata_format = MetadataFormat.create! valid_attributes
#       get edit_metadata_format_url(metadata_format)
#       expect(response).to be_successful
#     end
#   end
#
#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new MetadataFormat" do
#         expect {
#           post metadata_formats_url, params: { metadata_format: valid_attributes }
#         }.to change(MetadataFormat, :count).by(1)
#       end
#
#       it "redirects to the created metadata_format" do
#         post metadata_formats_url, params: { metadata_format: valid_attributes }
#         expect(response).to redirect_to(metadata_format_url(MetadataFormat.last))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "does not create a new MetadataFormat" do
#         expect {
#           post metadata_formats_url, params: { metadata_format: invalid_attributes }
#         }.to change(MetadataFormat, :count).by(0)
#       end
#
#       it "renders a response with 422 status (i.e. to display the 'new' template)" do
#         post metadata_formats_url, params: { metadata_format: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end
#
#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }
#
#       it "updates the requested metadata_format" do
#         metadata_format = MetadataFormat.create! valid_attributes
#         patch metadata_format_url(metadata_format), params: { metadata_format: new_attributes }
#         metadata_format.reload
#         skip("Add assertions for updated state")
#       end
#
#       it "redirects to the metadata_format" do
#         metadata_format = MetadataFormat.create! valid_attributes
#         patch metadata_format_url(metadata_format), params: { metadata_format: new_attributes }
#         metadata_format.reload
#         expect(response).to redirect_to(metadata_format_url(metadata_format))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "renders a response with 422 status (i.e. to display the 'edit' template)" do
#         metadata_format = MetadataFormat.create! valid_attributes
#         patch metadata_format_url(metadata_format), params: { metadata_format: invalid_attributes }
#         expect(response).to have_http_status(:unprocessable_entity)
#       end
#     end
#   end
#
#   describe "DELETE /destroy" do
#     it "destroys the requested metadata_format" do
#       metadata_format = MetadataFormat.create! valid_attributes
#       expect {
#         delete metadata_format_url(metadata_format)
#       }.to change(MetadataFormat, :count).by(-1)
#     end
#
#     it "redirects to the metadata_formats list" do
#       metadata_format = MetadataFormat.create! valid_attributes
#       delete metadata_format_url(metadata_format)
#       expect(response).to redirect_to(metadata_formats_url)
#     end
#   end
# end
